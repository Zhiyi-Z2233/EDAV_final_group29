[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EDAV_final_group29",
    "section": "",
    "text": "1 Introduction\nFor our final project, we will conduct exploratory data analysis for restaurants in New York City, a topic of great interest to both residents and visitors. Specifically, we will explore various aspects of the restaurant industry, including sales, profitability, safety standards, and customer satisfaction levels.\nTo achieve this, we have acquired a large data set detailing the inspection of over 250,000 restaurants in NYC. We will leverage R for data analysis and visualization, utilizing relevant packages to uncover trends and patterns. Through this analysis, we hope to gain meaningful insights into the factors that drive success and challenges within New York’s vibrant restaurant scene.\ntest",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "2.1 Description",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#description",
    "href": "data.html#description",
    "title": "2  Data",
    "section": "",
    "text": "2.1.1 Restaurant Inspection Data\nWe utilize the DOHMH New York City Restaurant Inspection dataset from the NYC OpenData library. This dataset includes details on all sustained or pending violation citations from full or special program inspections conducted within three years prior to the most recent inspection. The data covers restaurants and college cafeterias that are actively operating as of the RECORD DATE (the date the data was pulled).\nKey points about this dataset: - This is a huge data set containing about 260,000 observations of 27 variables. The data is updated daily according to the description of the data. - Each violation record is associated with an inspection, and establishments with multiple violations will have repeated fields for each violation. - Establishments are uniquely identified by their CAMIS (record ID) number. - Restaurants that have started operations or gone out of business within the dataset period are included only if they were active on the RECORD DATE. - Records also include restaurants applying for permits but not yet inspected and inspections resulting in no violations. - Restaurants with an inspection date of “1/1/1900” are new establishments awaiting inspection. - Restaurants with no violations are represented by a single row coded as having no violations in the ACTION field.\n\n\n2.1.2 Fast Food Chain Analysis Data\nFor the analysis of the most popular fast food chains, we use a dataset that provides nationwide data for the United States, not limited to New York. This dataset is sourced from Passby Blog’s Top Fast Food Chains Foot Traffic, offering insights into consumer behavior and fast food chain popularity across the country. We build this dataset manually.\n\n\n2.1.3 Customer Satisfaction Data\nTo explore customer satisfaction, we use data from the American Customer Satisfaction Index (ACSI). This dataset evaluates customer satisfaction levels across various restaurant types and food delivery services, providing valuable insights into consumer preferences and trends.\nWe build this dataset manually.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.2 Missing value analysis",
    "text": "2.2 Missing value analysis\nThe dataset processing steps include the following: 1. Removing records with missing values in key features, such as restaurant names, inspection dates, and grades. 2. Converting categorical variables into factors to facilitate visualization. 3. (Optional) Creating additional features to enhance the analysis.\nFirst, read the data.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(ggrepel)\nrestaurant&lt;-read_csv(\"/Users/zhiyizhang/Downloads/DOHMH_New_York_City_Restaurant_Inspection_Results_20241120.csv\")\n\n\nRows: 258714 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): DBA, BORO, CUISINE DESCRIPTION, INSPECTION DATE, GRADE, INSPECTION ...\ndbl (2): CAMIS, SCORE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nGet a general understanding of the data.\n\n\nCode\nglimpse(restaurant)\n\n\nRows: 258,714\nColumns: 8\n$ CAMIS                 &lt;dbl&gt; 50159534, 50096994, 50160319, 50146205, 41612260…\n$ DBA                   &lt;chr&gt; \"EL CALDERO RESTAURANT & SPORT BAR\", \"JONGRO BAN…\n$ BORO                  &lt;chr&gt; \"Bronx\", \"Queens\", \"Queens\", \"Manhattan\", \"Queen…\n$ `CUISINE DESCRIPTION` &lt;chr&gt; NA, NA, NA, NA, \"Mediterranean\", NA, \"American\",…\n$ `INSPECTION DATE`     &lt;chr&gt; \"1/1/1900\", \"1/1/1900\", \"1/1/1900\", \"1/1/1900\", …\n$ SCORE                 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, 34, NA, NA, NA, NA, NA, …\n$ GRADE                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, \"C\", NA, NA, NA, NA, NA,…\n$ `INSPECTION TYPE`     &lt;chr&gt; NA, NA, NA, NA, \"Smoke-Free Air Act / Initial In…\n\n\nCode\nsummary(restaurant)\n\n\n     CAMIS              DBA                BORO           CUISINE DESCRIPTION\n Min.   :30075445   Length:258714      Length:258714      Length:258714      \n 1st Qu.:41692608   Class :character   Class :character   Class :character   \n Median :50075750   Mode  :character   Mode  :character   Mode  :character   \n Mean   :47729105                                                            \n 3rd Qu.:50115166                                                            \n Max.   :50162077                                                            \n                                                                             \n INSPECTION DATE        SCORE           GRADE           INSPECTION TYPE   \n Length:258714      Min.   :  0.00   Length:258714      Length:258714     \n Class :character   1st Qu.: 12.00   Class :character   Class :character  \n Mode  :character   Median : 20.00   Mode  :character   Mode  :character  \n                    Mean   : 24.08                                        \n                    3rd Qu.: 32.00                                        \n                    Max.   :168.00                                        \n                    NA's   :12747                                         \n\n\nCode\ncolnames(restaurant)\n\n\n[1] \"CAMIS\"               \"DBA\"                 \"BORO\"               \n[4] \"CUISINE DESCRIPTION\" \"INSPECTION DATE\"     \"SCORE\"              \n[7] \"GRADE\"               \"INSPECTION TYPE\"    \n\n\nCheck missing data. Remove key feature missing including restaurant names, inspection date, and grade.\n\n\nCode\nrestaurant |&gt; summarise(across(everything(), ~ sum(is.na(.))))\n\n\n# A tibble: 1 × 8\n  CAMIS   DBA  BORO `CUISINE DESCRIPTION` `INSPECTION DATE` SCORE  GRADE\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;                 &lt;int&gt;             &lt;int&gt; &lt;int&gt;  &lt;int&gt;\n1     0   962     0                  2838                 0 12747 134001\n# ℹ 1 more variable: `INSPECTION TYPE` &lt;int&gt;\n\n\nCode\nrestaurant_clean &lt;- restaurant |&gt;\n  drop_na(DBA, `INSPECTION DATE`, GRADE)\n\n\n\n\nCode\ngrade_distribution &lt;- restaurant_clean |&gt;\n  count(GRADE, sort = TRUE)\n\n# Display the grade distribution\ngrade_distribution\n\n\n# A tibble: 6 × 2\n  GRADE     n\n  &lt;chr&gt; &lt;int&gt;\n1 A     86181\n2 B     14582\n3 N      9320\n4 C      9144\n5 Z      4779\n6 P       707\n\n\nCode\n# Visualize the grade distribution\nrestaurant_clean |&gt;\n  ggplot(aes(x = GRADE)) +\n  geom_bar() +\n  labs(\n    title = \"Distribution of Grades\",\n    x = \"Grade\",\n    y = \"Count\"\n  ) +\n  theme_minimal()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "3  Results",
    "section": "",
    "text": "3.1 Favorite Cuisine Type\nCode\nlibrary(ggplot2)\ncuisine_data &lt;- restaurant |&gt;\n  filter(!is.na(`CUISINE DESCRIPTION`)) |&gt;\n  count(`CUISINE DESCRIPTION`, name = \"count\") |&gt;\n  arrange(desc(count)) |&gt;\n  mutate(Cuisine = if_else(row_number() &lt;= 15, `CUISINE DESCRIPTION`, \"Other\")) |&gt;\n  group_by(Cuisine) |&gt;\n  summarise(count = sum(count)) |&gt;\n  mutate(proportion = count / sum(count), \n         label = paste0(Cuisine, \" (\", round(proportion * 100, 1), \"%)\")) |&gt;\n  arrange(desc(count))\n\nprint(cuisine_data$Cuisine)\n\n\n [1] \"Other\"                    \"American\"                \n [3] \"Chinese\"                  \"Coffee/Tea\"              \n [5] \"Pizza\"                    \"Latin American\"          \n [7] \"Mexican\"                  \"Bakery Products/Desserts\"\n [9] \"Caribbean\"                \"Japanese\"                \n[11] \"Italian\"                  \"Spanish\"                 \n[13] \"Chicken\"                  \"Donuts\"                  \n[15] \"Sandwiches\"               \"Asian/Asian Fusion\"\nWe can see that American, Chinese, and Latin American food are the top three popular cuisine, followed by Mexican, Caribbean, and Japanese cuisines. Then we want to know the average weighted score of these cuisine types.\nCode\ntop_15_cuisines &lt;- c(\"Other\", \"American\", \"Chinese\", \"Coffee/Tea\", \"Pizza\", \n                     \"Latin American\", \"Mexican\", \"Bakery Products/Desserts\", \n                     \"Caribbean\", \"Japanese\", \"Italian\", \"Spanish\", \n                     \"Chicken\", \"Donuts\", \"Sandwiches\", \"Asian/Asian Fusion\")\n\ncuisine_avg_score &lt;- restaurant |&gt;\n  filter(`CUISINE DESCRIPTION` %in% top_15_cuisines, !is.na(SCORE)) |&gt; \n  group_by(`CUISINE DESCRIPTION`) |&gt; \n  summarise(\n    avg_score = mean(SCORE, na.rm = TRUE) \n  ) |&gt;\n  arrange(desc(avg_score))\n\nggplot(cuisine_avg_score, aes(x = reorder(`CUISINE DESCRIPTION`, avg_score), y = avg_score, fill = avg_score)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() + \n  labs(\n    title = \"Top 15 Cuisine Types by Average Score\",\n    x = \"Cuisine Type\",\n    y = \"Average Score\"\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"none\")\nWe observe that Caribbean, Chinese, Spanish, and Asian/Asian Fusion cuisines rank highly. However, despite being one of the most popular types, American cuisine does not receive a particularly good score. On the other hand, Donuts appear at the bottom, which aligns with our expectations, as they tend to be low in nutritional value and may not meet high hygiene standards during processing.\nUse box plot to show information:\nCode\ncutoff &lt;- data.frame(yintercept = 14, cutoff = factor(14))\n\nrestaurant_top_15 &lt;- restaurant |&gt;\n  filter(!is.na(SCORE), !is.na(`CUISINE DESCRIPTION`)) |&gt;\n  group_by(`CUISINE DESCRIPTION`) |&gt;\n  summarise(avg_score = mean(SCORE, na.rm = TRUE)) |&gt;\n  arrange(desc(avg_score)) |&gt;\n  slice(1:15)\n\nggplot(restaurant |&gt; filter(`CUISINE DESCRIPTION` %in% restaurant_top_15$`CUISINE DESCRIPTION`), \n       aes(x = `CUISINE DESCRIPTION`, y = SCORE)) + \n  geom_boxplot(outlier.size = 2) +\n  ggtitle(\"Top 15 Cuisines by Scores\") +\n  geom_hline(aes(yintercept = yintercept, linetype = cutoff), data = cutoff, color = \"red\", linewidth = 1.5) + \n  geom_text(aes(0, 12, label = \"A Grade\", hjust = -.1, vjust = -1, color = \"red\")) +\n  theme_minimal() + \n  theme(plot.title = element_text(hjust = 0.5),\n        axis.title.y = element_blank(),\n        axis.title.x = element_blank(),\n        axis.text.x = element_text(vjust = 0.5, size = 11),\n        legend.position = \"none\") +\n  coord_flip()\n\n\nWarning in geom_text(aes(0, 12, label = \"A Grade\", hjust = -0.1, vjust = -1, : All aesthetics have length 1, but the data has 10935 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\nWarning: Removed 363 rows containing non-finite outside the scale range\n(`stat_boxplot()`).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "results.html#district-comparison",
    "href": "results.html#district-comparison",
    "title": "3  Results",
    "section": "3.2 District Comparison",
    "text": "3.2 District Comparison\nNext, we want to know the inspection result of different district in New York in the past ten years.\n\n\nCode\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\n\nrestaurant$`INSPECTION DATE` &lt;- as.Date(restaurant$`INSPECTION DATE`)\n\nrestaurant &lt;- restaurant |&gt;\n  mutate(year = year(`INSPECTION DATE`))\n\navg_score_by_boro_year &lt;- restaurant |&gt;\n  filter(!is.na(SCORE)) |&gt;\n  group_by(year, BORO) |&gt;\n  summarise(avg_score = mean(SCORE, na.rm = TRUE))\n\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n\nCode\nggplot(avg_score_by_boro_year, aes(x = factor(year), y = avg_score, fill = BORO)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  geom_text(aes(label = round(avg_score, 1)), \n            position = position_dodge(width = 0.8), \n            vjust = -0.5, size = 2) +\n  labs(\n    title = \"Average Score by Borough and Year\",\n    x = \"Year\",\n    y = \"Average Score\",\n    fill = \"Borough\"\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"top\")\n\n\n\n\n\n\n\n\n\nOver the past five years, Brooklyn and Queens have consistently ranked as the top two boroughs, while Staten Island has consistently had the lowest scores. Manhattan, positioned in the middle, shows relatively stable performance. A particularly interesting trend is the steady increase in Manhattan’s average score over the past decade. In fact, all boroughs have seen an improvement in their scores over this period.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  }
]